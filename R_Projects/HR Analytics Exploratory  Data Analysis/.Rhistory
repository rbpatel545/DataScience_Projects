result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position[i-1] + step1
df$Position2[i] <- df$Position[i-1] + step2
}
library(ggplot2)
library(gganimate)
n <- 10
df <- as.data.frame(matrix(NA, n,5))
colnames(df) <- c("Step", "Result.x","Result.y","Position1","Position2")
df$Step[1]=0
df$Result.x[1]=0
df$Result.y[1]=0
df$Position1[1]=3
df$Position2[1]=3
i=2
for(i in 2:10){
result1= sample(1:6,1, replace = TRUE)
if (result1 <= 4){                     # Same IF-ELSE statement as above
step1 = 1
}  else {
step1 = -1
}
result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position[i-1] + step1
df$Position2[i] <- df$Position[i-1] + step2
}
# TWO DIMENSIONAL RANDOM WALK #
# Required libraries for graphing and animation
library(ggplot2)
library(gganimate)
# Specify maximum number of steps, which shouldn't ever go above 100
n <- 250
# FIRST CREATE AN EMPTY DATAFRAME AND LABEL COLUMNS
df <- as.data.frame(matrix(NA, n, 5))
colnames(df) <- c("Step", "Result.x", "Result.y", "X", "Y")
df$Step[1] <- 0
df$Result.x[1] <- 0
df$Result.y[1] <- 0
df$X[1] <- 0
df$Y[1] <- 0
for (i in 2:n) {
# Determine direction of step in X axis
result.x <- sample(1:6,1, replace = TRUE) # replace = TRUE is sampling with replacement
if (result.x <= 4){                     # Same IF-ELSE statement as above
step.x = 1
}  else {
step.x = -1
}
# Determine direction of step in Y axis
result.y <- sample(1:6,1, replace = TRUE) # replace = TRUE is sampling with replacement
if (result.y <= 4){                     # Same IF-ELSE statement as above
step.y = 1
}  else {
step.y = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step.x
df$Result.y[i] <- step.y
df$X[i] <- df$X[i-1] + step.x   # Position is updated to reflect step forward or step back
df$Y[i] <- df$Y[i-1] + step.y   # Position is updated to reflect step forward or step back
}
# Graph the random walk
p <- ggplot(df, aes(x = X, y = Y)) + geom_path() + geom_point() + theme_minimal()
p
# Animate the random walk
p + transition_reveal(df$Step)
library(ggplot2)
library(gganimate)
n <- 250
df <- as.data.frame(matrix(NA, n,5))
colnames(df) <- c("Step", "Result.x","Result.y","Position1","Position2")
df$Step[1]=0
df$Result.x[1]=0
df$Result.y[1]=0
df$Position1[1]=0
df$Position2[1]=0
for(i in 2:10){
result1= sample(1:6,1, replace = TRUE)
if (result1 <= 4){                     # Same IF-ELSE statement as above
step1 = 1
}  else {
step1 = -1
}
result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position[i-1] + step1
df$Position2[i] <- df$Position[i-1] + step2
}
library(ggplot2)
library(gganimate)
n <- 250
df <- as.data.frame(matrix(NA, n,5))
colnames(df) <- c("Step", "Result.x","Result.y","Position1","Position2")
df$Step[1]=0
df$Result.x[1]=0
df$Result.y[1]=0
df$Position1[1]=0
df$Position2[1]=0
for(i in 2:10){
result1= sample(1:6,1, replace = TRUE)
if (result1 <= 4){                     # Same IF-ELSE statement as above
step1 = 1
}  else {
step1 = -1
}
result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position[i-1] + step1 + 1
df$Position2[i] <- df$Position[i-1] + step2 + 1
}
library(ggplot2)
library(gganimate)
n <- 250
df <- as.data.frame(matrix(NA, n,5))
colnames(df) <- c("Step", "Result.x","Result.y","Position1","Position2")
df$Step[1]=0
df$Result.x[1]=0
df$Result.y[1]=0
df$Position1[1]=0
df$Position2[1]=0
for(i in 2:n){
result1= sample(1:6,1, replace = TRUE)
if (result1 <= 4){                     # Same IF-ELSE statement as above
step1 = 1
}  else {
step1 = -1
}
result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position[i-1] + step1
df$Position2[i] <- df$Position[i-1] + step2
}
library(ggplot2)
library(gganimate)
n <- 250
df <- as.data.frame(matrix(NA, n,5))
colnames(df) <- c("Step", "Result.x","Result.y","Position1","Position2")
df$Step[1]=0
df$Result.x[1]=0
df$Result.y[1]=0
df$Position1[1]=0
df$Position2[1]=0
for(i in 2:n){
result1= sample(1:6,1, replace = TRUE)
if (result1 <= 4){                     # Same IF-ELSE statement as above
step1 = 1
}  else {
step1 = -1
}
result2= sample(1:6,1,replace= TRUE)
if (result2 <= 4){                     # Same IF-ELSE statement as above
step2 = 1
}  else {
step2 = -1
}
df$Step[i] <- i-1
df$Result.x[i] <- step1
df$Result.y[1] <- step2
df$Position1[i] <- df$Position1[i-1] + step1
df$Position2[i] <- df$Position2[i-1] + step2
}
# Graph the random walk
p <- ggplot(df, aes(x = Position1, y = Position2)) + geom_path() + geom_point() + theme_minimal()
p
# Animate the random walk
p + transition_reveal(df$Step)
install.packages('ggplot2')
install.packages('tidyr')
install.packages('dplyr')
install.packages('caret')
install.packages('e1071')
install.packages('Epi')
install.packages('lubridate')
install.packages("readr")
Abs_sal=lm(Absences ~ Salary + SpecialProjectsCount + EngagementSurvey + EmpSatisfaction + Years_in_post+Zip, data=hrdataset)
setwd('C:\\Users\\rp01080\\Desktop\\HR Analytics')
df1 = data.frame(
y1 = c(1, 2, 3),
y2 = c(4, 5, 6)
)
df1
df1 = data.frame(
y1 = c("a", "b", "c"),
y2 = c(4, 5, 6)
)
df1
df2 = data.frame(
y3 = c("d", "e", "f"),
)
df2 = data.frame(
y3 = c("d", "e", "f")
)
df1$y5 <- do.call(paste, c(data[my_cols], sep=""))
my_cols <- c("y1", "y2")
df1$y5 <- do.call(paste, c(data[my_cols], sep=""))
df1$y5 <- do.call(paste, c(df1[my_cols], sep ="" ))
df1
install.packages(dplyr)
install.packages('dplyr')
install.packages('tidyr')
library(dplyr)
library(tidyr)
df1<- df1[,!colnames(df1)in %in% my_cols]
df1
df1 <- df1[,!colnames(df1)in %in% my_cols]
df1 <- df1[,!colnames(df1) %in% my_cols]
df1
df1 = data.frame(
y1 = c("a", "b", "c","d"),
y2 = c(4, 5, 6, 7)
)
df1
my_cols <- c("y1", "y2")
df1$y5 <- do.call(paste, c(df1[my_cols], sep ="" ))
df1
my_cols2 <- c("y1")
df1 <- df1[,!colnames(df1) %in% my_cols2]
df1
df1 = data.frame(
y1 = c("a, b, c", "b, c, d", "c, d, e","d, e, f"),
y2 = c(4, 5, 6, 7)
)
df1
my_cols <- c("y1", "y2")
df1$y5 <- do.call(paste, c(df1[my_cols], sep ="" ))
df1
df1$y5 <- do.call(paste, c(df1[my_cols], sep ="," ))
df1
df1$y5 <- do.call(paste, c(df1[my_cols], sep =" , " ))
df1
my_cols2 <- c("y1")
df1 <- df1[,!colnames(df1) %in% my_cols2]
df1
df1 = data.frame(
y1 = c("Drama", "Mystery", "Horror", "Thriller"),
y2 = c("TarynManning", "NatashaLyonne", "Chlo\\\\u00ebSevigny")
)
df1 = data.frame(
y1 = c("Drama", "Mystery", "Horror"),
y2 = c("TarynManning", "NatashaLyonne", "Chlo\\\\u00ebSevigny")
)
df1
my_cols <- c("y1", "y2")
df1$y5 <- do.call(paste, c(df1[my_cols], sep =" , " ))
df1
install.packages('ggplot2')
install.packages('tidyr')
install.packages('dplyr')
install.packages('caret')
install.packages('e1071')
install.packages('Epi')
install.packages('lubridate')
install.packages("readr")
library("readr")
```{r cars}
```{r pressure, echo=FALSE}
```{r}
library(ggplot2)
library(e1071)
library(tidyr)
library(dplyr)
library(caret)
library(lubridate)
library(Epi)
library("readr")
```
library(readr)
getwd()
setwd(C:/Users/Admin/Desktop/HR Analytics Exploratory  Data Analysis)
setwd("C:/Users/Admin/Desktop/HR Analytics Exploratory  Data Analysis")
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
setwd('C:\\Users\\Admin\\Desktop\\HR Analytics Exploratory  Data Analysis')
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
setwd('C:\\Users\\Admin\\Desktop\\HR_Analytics\\Project')
setwd('C:\\Users\\Admin\\Desktop\\HR Analytics Exploratory  Data Analysis')
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
getwd()
setwd('C:\\Users\\Admin\\Desktop\\HR Analytics Exploratory  Data Analysis')
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
getwd()
setwd('C:\\Users\\Admin\\Desktop\\HR Analytics Exploratory  Data Analysis')
getwd()
setwd('C:\\Users\\Admin\\Desktop\\HR Analytics Exploratory  Data Analysis')
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset=read.csv("flat_file.csv",header= TRUE, stringsAsFactors = FALSE, na.strings= c(""," ",NA))
hrdataset$LastPerformanceReview_Date <- as.Date(hrdataset$LastPerformanceReview_Date,"%Y-%m-%d")
hrdataset$DateofHire <- as.Date(hrdataset$DateofHire, format = "%Y-%m-%d")
hrdataset$DateofTermination <- as.Date(hrdataset$DateofTermination, format ="%Y-%m-%d")
sapply(hrdataset,class)
head(hrdataset)
summary(hrdataset)
sapply(hrdataset,class)
head(hrdataset)
summary(hrdataset)
pairs(hrdataset[,c(5,6,7,12,13,14)], pch = 19)
cor(hrdataset$Absences,hrdataset$Years_in_post)
cor(hrdataset$Absences,hrdataset$Years_in_post)
cor(hrdataset$Absences,hrdataset$EmpSatisfaction)
cor(hrdataset$Absences,hrdataset$Salary)
cor(hrdataset$Absences,hrdataset$SpecialProjectsCount)
cor(hrdataset$Absences,hrdataset$DaysLateLast30)
cor(hrdataset$Absences,hrdataset$Years_in_post)
ggplot( hrdataset ) +
geom_point(mapping = aes( x = Absences, y = Salary, color= Department)) +
xlab("-- Absences --") +
ylab("Salary") +
labs( title = "Salary vs Absence", subtitle = "Analysing the chart" ) + facet_wrap(~Department,nrow = 2)
theme_classic()
ggplot( hrdataset ) +
geom_point(mapping = aes( x = Absences, y = SpecialProjectsCount, color= Department)) +
xlab("-- Absences --")+
ylab("Special Projects") +
labs( title = "Special Projects vs Absence", subtitle = "Analysing the chart" ) + facet_wrap(~Department,nrow = 2)+
theme_classic()
ggplot(hrdataset, aes(PerformanceScore, Absences)) + geom_boxplot(fill = "red")+
scale_y_continuous("Absences")+
labs(title = "Box Plot", x = "PerformanceScore")
ggplot(hrdataset, aes(Department, Absences)) + geom_boxplot(fill = "red")+
scale_y_continuous("Absences")+
labs(title = "Box Plot", x = "Department")
ggplot(hrdataset, aes(EmploymentStatus, Absences)) + geom_boxplot(fill = "green")+
scale_y_continuous("Absences")+
labs(title = "Box Plot", x = "Department")
ggplot(hrdataset, aes(Position, Absences)) + geom_boxplot(fill = "green")+
scale_y_continuous("Absences")+
labs(title = "Box Plot", x = "Position")+theme(axis.text.x= element_text(angle=90))
Abs_Dept_Stat <- hrdataset %>% group_by(Department) %>%
summarize(n = n(),
mean = mean(Absences),
sd = sd(Absences),
se = sd / sqrt(n),
UL = mean + (qnorm(0.975) * sd / sqrt(n)),
LL= mean - (qnorm(0.975) * sd / sqrt(n)))
print(Abs_Dept_Stat)
Abs_Pos_Stat <- hrdataset %>% group_by(Position) %>%
summarize(n = n(),
mean = mean(Absences),
sd = sd(Absences),
se = sd / sqrt(n),
UL = mean + (qnorm(0.975) * sd / sqrt(n)),
LL= mean - (qnorm(0.975) * sd / sqrt(n)))
print(Abs_Pos_Stat,n=31)
Abs_sal=lm(Absences ~ Salary + SpecialProjectsCount + EngagementSurvey + EmpSatisfaction + Years_in_post+Zip, data=hrdataset)
summary(Abs_sal)
# Create a new column "genderid"
hrdataset$genderid <- NA
# Convert "Sex" column to 0s and 1s and assign the values to "genderid"
hrdataset$genderid <- ifelse(hrdataset$Sex == "M", 0, 1)
# View the updated dataset
print(hrdataset)
# Create a new column "PfrmId"
hrdataset$PfrmId <- NA
# Convert "PerformanceScore" column to numerical values and assign them to "PfrmId"
hrdataset$PfrmId <- ifelse(hrdataset$PerformanceScore == "Fully Meets", 3, ifelse(hrdataset$PerformanceScore == "Needs Improvement", 2, ifelse(hrdataset$PerformanceScore == "PIP", 1, 4)))
# View the updated dataset
print(hrdataset)
# Create a new column "EmpStat"
hrdataset$EmpStat <- NA
# Convert "EmploymentStatus" column to numerical values and assign them to "EmpStat"
hrdataset$EmpStat <- ifelse(hrdataset$EmploymentStatus == "Active", 1,
ifelse(hrdataset$EmploymentStatus == "Voluntarily Terminated", 2, 1))
# View the updated dataset
print(hrdataset)
# Create a new column "Dept_No"
hrdataset$Dept_No <- NA
# Convert "Department" column to numerical values and assign them to "Dept_No"
hrdataset$Dept_No <- ifelse(hrdataset$Department == "Production", 1,
ifelse(hrdataset$Department == "Admin Offices", 2,
ifelse(hrdataset$Department == "Executive Office", 3,
ifelse(hrdataset$Department == "IT/IS", 4,
ifelse(hrdataset$Department == "Sales", 5, 6)))))
# View the updated dataset
print(hrdataset)
```
hrdataset$Dept_No <- NA
# Convert "Department" column to numerical values and assign them to "Dept_No"
hrdataset$Dept_No <- ifelse(hrdataset$Department == "Production", 1,
ifelse(hrdataset$Department == "Admin Offices", 2,
ifelse(hrdataset$Department == "Executive Office", 3,
ifelse(hrdataset$Department == "IT/IS", 4,
ifelse(hrdataset$Department == "Sales", 5, 6)))))
# View the updated dataset
print(hrdataset)
# Create a new column "Pos_No" with all NA values
hrdataset$Pos_No <- NA
# Create a unique list of all positions in the "Position" column
position <- unique(hrdataset$Position)
# Assign numeric values to each position and update the "Pos_No" column
for (i in seq_along(position)) {
hrdataset$Pos_No[hrdataset$Position == position[i]] <- i
}
# Print the updated dataset with the new "Pos_No" column
print(hrdataset)
pairs(hrdataset[,c(5,6,7,8,13,24,25,26,27,28)], pch = 19)
cor(hrdataset$EmpStat,hrdataset$Salary)
cor(hrdataset$EmpStat,hrdataset$EngagementSurvey)
cor(hrdataset$EmpStat,hrdataset$EmpSatisfaction)
cor(hrdataset$EmpStat,hrdataset$SpecialProjectsCount)
cor(hrdataset$EmpStat,hrdataset$Absences)
cor(hrdataset$EmpStat,hrdataset$genderid)
cor(hrdataset$EmpStat,hrdataset$PfrmId)
cor(hrdataset$EmpStat,hrdataset$Dept_No)
cor(hrdataset$EmpStat,hrdataset$Pos_No)
ggplot( hrdataset ) +
geom_point(mapping = aes( x = PfrmId, y = Salary, color= Department)) +
xlab("Performance Score") +
ylab("Salary") +
labs( title = "Salary vs Performance Score", subtitle = "Analysing the chart" ) + facet_wrap(~Department,nrow = 2)
theme_classic()
ggplot( hrdataset ) +
geom_point(mapping = aes( x = EmpStat, y = Position, color= Department)) +
xlab("Employee Status") +
ylab("Position of Employee") +
labs( title = "Employee Status vs Position of Employeee as per department ", subtitle = "Analysing the chart" ) + facet_wrap(~Department,nrow = 2)
theme_classic()
cor(hrdataset$EngagementSurvey,hrdataset$EmpSatisfaction)
cor(hrdataset$EngagementSurvey,hrdataset$Absences)
cor(hrdataset$EngagementSurvey,hrdataset$Salary)
cor(hrdataset$EngagementSurvey,hrdataset$SpecialProjectsCount)
cor(hrdataset$EngagementSurvey,hrdataset$DaysLateLast30)
ggplot( hrdataset ) +
geom_point(mapping = aes( x = EngagementSurvey, y = DaysLateLast30, color= Department)) +
xlab("-- Engagement Score --")+
ylab("Days Late Last 30") +
labs( title = "Days Late Last 30 vs Engagement Survey", subtitle = "Analysing the chart" ) + facet_wrap(~Department,nrow = 2)
theme_classic()
ggplot(hrdataset, aes(PerformanceScore, EngagementSurvey)) + geom_boxplot(fill = "red")+
scale_y_continuous("Engagement Score")+
labs(title = "Box Plot", x = "PerformanceScore")
ggplot(hrdataset, aes(Department, EngagementSurvey)) + geom_boxplot(fill = "red")+
scale_y_continuous("Engagement Score")+
labs(title = "Box Plot", x = "Department")
ggplot(hrdataset, aes(EmploymentStatus, EngagementSurvey)) + geom_boxplot(fill = "green")+
scale_y_continuous("Engagement Score")+
labs(title = "Box Plot", x = "Employment Status")
ggplot(hrdataset, aes(Position, EngagementSurvey)) + geom_boxplot(fill = "green")+
scale_y_continuous("Engagement Score")+
labs(title = "Box Plot", x = "Position")+theme(axis.text.x= element_text(angle=90))
model <- lm(EngagementSurvey ~ EmpSatisfaction, data = hrdataset)
ggplot(hrdataset, aes(x = EngagementSurvey, y = EmpSatisfaction)) +    geom_smooth(method='lm')
summary(model)
model2 <- lm(EngagementSurvey ~ Salary, data = hrdataset)
ggplot(hrdataset, aes(x = EngagementSurvey, y = Salary)) +    geom_smooth(method='lm')
summary(model2)
model3 <- lm(EngagementSurvey ~ PerformanceScore, data = hrdataset)
ggplot(hrdataset, aes(x = EngagementSurvey, y = PerformanceScore)) +    geom_smooth(method='lm')
summary(model3)
model4 <- lm(EngagementSurvey ~ Department, data = hrdataset)
ggplot(hrdataset, aes(x = EngagementSurvey, y = Department)) +    geom_smooth(method='lm')
model5 <- lm(EngagementSurvey ~ EmploymentStatus, data = hrdataset)
ggplot(hrdataset, aes(x = EngagementSurvey, y = EmploymentStatus)) +    geom_smooth(method='lm')
terminated <- !(is.na(hrdataset$DateofTermination))
hrdataset$Years_in_post[terminated] <- interval(start = as.Date(hrdataset$DateofHire[terminated]), end = as.Date(hrdataset$DateofTermination[terminated]))/duration(n = 1,units = "years")
hrdataset_factored <- hrdataset %>% mutate (gender= ifelse(Sex=="M",1,0))
Q4 <- cor.test (hrdataset_factored$Salary, hrdataset_factored$gender)
print(paste("Corr coeff: ",round(Q4$estimate, 2)))
print(paste("p-value: ",format.pval(Q4$p.value, digits=2)))
Q4 <- cor.test (hrdataset_factored$Salary, hrdataset_factored$Years_in_post)
print(paste("Corr coeff: ",round(Q4$estimate, 2)))
print(paste("p-value: ",format.pval(Q4$p.value, digits=2)))
ggplot( hrdataset_factored ) +
geom_point(mapping = aes( x = Department, y = hrdataset_factored$Salary, color= hrdataset_factored$gender)) +
xlab("-- Department --") +
ylab("Salary") +
labs( title = "Salary vs hrdataset_factored$Department", subtitle = "Department" ) + facet_wrap(~gender,nrow = 2)
theme_classic()
ggplot(hrdataset, aes(Sex, Salary)) + geom_boxplot(fill = "blue")+
scale_y_continuous("Salary")+
labs(title = "Box Plot", x = "Sex")
Q4_model <- glm(Salary ~ gender + Years_in_post + Department+ Position , data=hrdataset_factored)
summary (Q4_model)
